# This is an unbeatable super computer that will either win or tie every tic-tac-toe game that it plays.
# This game acts as a practice for custom functions.

import time
from player import HumanPlayer, RandomComputerPlayer

# Define the function to create the board (essentially just the visual ouput).
class TicTacToe:
    def __init__(self):
        self.board = [" " for _ in range(9)] # this is a single list used to represent a 3x3 board
        self.current_winner = None # this is to keep track of the winner!

    def print_board(self):
        #This is just for getting the rows.
        for row in [self.board[i*3:(i+1)*3] for i in range(3)]: # tells us which row to pick
            print("│ " + " │ ".join(row) + " │") # this is basically saying join them in a string where the seperator is this vertical line

    @staticmethod
    def print_board_nums():
        # 0 │ 1 │ 2 etc (tells us what number corresponds to what box)
        number_board = [[str(i) for i in range(j*3, (j+1)*3)] for j in range(3)] # give me the row indices
        for row in number_board:
             print("│ " + " │ ".join(row) + " │")
    
    def available_moves(self):
        # this shows what moves are left to be made after a move has already been made
        return [i for im spot in enumerate(self.board) if spot == " "] # this is an empty space, and thus an available move
    
    def empty_squares(self):
        return " " in self.baord
    
    def num_empty_squares(self):
        return len(self.available_moves())

def play(game, x_player, o_player, print_game=True):
    if print_game:
        game.print_board_nums()
    
    letter = "X" # starting letter
    # iterate while the game still has empty squares
    # (we don't have to worry about the winner because we'll just return that
    # since it breaks the loop)
    while game.empty_squares():
        pass


